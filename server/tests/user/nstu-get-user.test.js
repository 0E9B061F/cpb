'use strict'

process.env.NODE_ENV = "test"


const request = require('supertest')
const { db, app } = require('../../server.js')
const { expectLogout, expectLogin, resetdb } = require('../../lib/testing.js')


beforeEach(resetdb(db))


describe("getting user resources", ()=> {
  test("information is limited on other users", async()=> {
    const agent = request.agent(app)
    let rep = await agent.get("/sys:api/nstu/~root")
    expect(rep.statusCode).toBe(200)
    expect(rep.body.err).toBe(0)
    expect(rep.body.val.user.handle).toBe('root')
    expect(rep.body.val.user.email).toBeUndefined()
    expect(rep.body.val.user.config).toBeUndefined()
    expect(rep.body.val.user.session).toBeUndefined()
    rep = await agent.get("/sys:api/nstu/~qibly")
    expect(rep.statusCode).toBe(200)
    expect(rep.body.err).toBe(0)
    expect(rep.body.val.user.handle).toBe('qibly')
    expect(rep.body.val.user.email).toBeUndefined()
    expect(rep.body.val.user.config).toBeUndefined()
    expect(rep.body.val.user.session).toBeUndefined()
    rep = await agent.post("/sys:api/nstu/~root").send({type: 'login', pass: 'axiomatic'})
    expectLogin(rep, 'root')
    rep = await agent.get("/sys:api/nstu/~qibly")
    expect(rep.statusCode).toBe(200)
    expect(rep.body.err).toBe(0)
    expect(rep.body.val.user.handle).toBe('qibly')
    expect(rep.body.val.user.email).toBeUndefined()
    expect(rep.body.val.user.config).toBeUndefined()
    expect(rep.body.val.user.session).toBeUndefined()
  })
  test("current user returns detailed information", async()=> {
    const agent = request.agent(app)
    let rep = await agent.post("/sys:api/nstu/~root").send({type: 'login', pass: 'axiomatic'})
    expectLogin(rep, 'root')
    rep = await agent.get("/sys:api/nstu/~root")
    expect(rep.statusCode).toBe(200)
    expect(rep.body.err).toBe(0)
    expect(rep.body.val.user.handle).toBe('root')
    expect(rep.body.val.user.email).toBe('root@example.com')
    expect(rep.body.val.user.config).toBeDefined()
    expect(rep.body.val.user.session).toBeDefined()
  })
  test("user resources should never return a hash", async()=> {
    const agent = request.agent(app)
    let rep = await agent.get("/sys:api/nstu/~root")
    expect(rep.statusCode).toBe(200)
    expect(rep.body.err).toBe(0)
    expect(rep.body.val.user.hash).toBeUndefined()
    rep = await agent.post("/sys:api/nstu/~root").send({type: 'login', pass: 'axiomatic'})
    expectLogin(rep, 'root')
    rep = await agent.get("/sys:api/nstu/~root")
    expect(rep.statusCode).toBe(200)
    expect(rep.body.err).toBe(0)
    expect(rep.body.val.user.hash).toBeUndefined()
    rep = await agent.get("/sys:api/nstu/~qibly")
    expect(rep.statusCode).toBe(200)
    expect(rep.body.err).toBe(0)
    expect(rep.body.val.user.hash).toBeUndefined()
  })
  test("getting the current user returns session information", async()=> {
    const agent = request.agent(app)
    let rep = await agent.get("/sys:api/nstu/~")
    expect(rep.statusCode).toBe(200)
    expect(rep.body.err).toBe(0)
    expect(rep.body.val.user.session).toBeDefined()
    expect(rep.body.val.user.session.handle).toBe('guest')
    expect(rep.body.val.user.session.login).toBe(false)
    rep = await agent.post("/sys:api/nstu/~root").send({type: 'login', pass: 'axiomatic'})
    rep = await agent.get("/sys:api/nstu/~")
    expect(rep.statusCode).toBe(200)
    expect(rep.body.err).toBe(0)
    expect(rep.body.val.user.session).toBeDefined()
    expect(rep.body.val.user.session.handle).toBe('root')
    expect(rep.body.val.user.session.login).toBe(true)
  })
})
